rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user has admin privileges
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - role-based access
    match /users/{userId} {
      // Users can read their own data, admins can read all users
      allow read: if isOwner(userId) || isAdmin();
      
      // Only admins can create/update user documents
      allow create, update: if isAdmin();
      
      // Only super admins can delete users
      allow delete: if isSuperAdmin();
      
      // Users can update their own profile (limited fields)
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLoginAt', 'updatedAt']);
    }
    
    
    
    // Testimonials collection - public read for published, admin write
    match /testimonials/{document} {
      // Anyone can read published testimonials
      allow read: if resource.data.isPublished == true;
      
      // Admins can read all testimonials and manage them
      allow read, write: if isAdmin();
      
      // Ensure required fields are present on create
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'location', 'program', 'rating', 'message', 'isPublished']);
    }
    
    // Training Programs collection - public read for active, admin write
    match /trainingPrograms/{document} {
      // Anyone can read active training programs
      allow read: if resource.data.isActive == true;
      
      // Admins can read all training programs and manage them
      allow read, write: if isAdmin();
      
      // Ensure required fields are present on create
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'description', 'fees', 'duration', 'location', 'startDate', 'endDate', 'registrationEndDate', 'maxParticipants', 'organizerName', 'isActive', 'order']);
    }
    
    
    // Registrations collection - user create, admin manage
    match /registrations/{document} {
      // Anyone can create registrations (for public registration form)
      allow create: if request.resource.data.keys().hasAll(['registrationId', 'name', 'email', 'mobile', 'programId', 'status']) && 
        request.resource.data.status == 'pending';
      
      // Users can read their own registrations (if authenticated and email matches)
      allow read: if isAuthenticated() && 
        (request.auth.token.email == resource.data.email || isAdmin());
      
      // Admins can read all registrations
      allow read: if isAdmin();
      
      // Admins can update registrations (for approval/rejection)
      allow update: if isAdmin();
      
      // Only super admins can delete registrations (for data integrity)
      allow delete: if isSuperAdmin();
    }
    
    
    // Gallery collection - public read for published, admin write
    match /gallery/{document} {
      // Anyone can read published gallery items
      allow read: if resource.data.isPublished == true;
      
      // Admins can read all gallery items and manage them  
      allow read, write: if isAdmin();
      
      // Allow authenticated users to read gallery items (for admin access)
      allow read: if isAuthenticated();
      
      // Allow listing gallery collection for authenticated users
      allow list: if isAuthenticated();
      
      // Ensure required fields are present on create
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['type', 'title', 'isPublished', 'isFeatured', 'order']);
    }
    
    
    // Team collection - public read for active members, admin write
    match /team/{document} {
      // Anyone can read active team members
      allow read: if resource.data.isActive == true;
      
      // Admins can read all team members and manage them
      allow read, write: if isAdmin();
      
      // Allow listing team collection for public access
      allow list: if true;
      
      // Ensure required fields are present on create
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'designation', 'category', 'isActive', 'order']);
    }
    
    
    
    // Settings collection - admin only
    match /settings/{document} {
      // Only admins can read and write settings
      allow read, write: if isAdmin();
      
      // Only super admins can delete settings
      allow delete: if isSuperAdmin();
    }
    
    
  
    
    // Backup collection - super admin only
    match /backups/{document} {
      allow read, write: if isSuperAdmin();
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 